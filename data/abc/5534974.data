{'TMP': 'C:\\Users\\liukang\\AppData\\Local\\Temp', 'PYTHONIOENCODING': 'UTF-8', 'COMPUTERNAME': 'LIUKANG-PC', 'USERDOMAIN': 'liukang-PC', 'PSMODULEPATH': 'C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'PROCESSOR_IDENTIFIER': 'x86 Family 21 Model 19 Stepping 1, AuthenticAMD', 'VBOX_MSI_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'PROGRAMFILES': 'C:\\Program Files', 'PROCESSOR_REVISION': '1301', 'SYSTEMROOT': 'C:\\Windows', 'PATH': 'C:\\Python27\\Lib\\site-packages\\PyQt4;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files\\Common Files\\NetSarang;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\WIDCOMM\\Bluetooth Software\\;C:\\Program Files\\ATI Technologies\\ATI.ACE\\Core-Static;C:\\Program Files\\MySQL\\MySQL Utilities 1.6\\;C:\\Program Files\\MySQL\\MySQL Server 5.7\\bin;C:\\Python27;C:\\Program Files\\Mozilla Firefox\\firefox.exe;C:\\Program Files\\Tesseract-OCR;C:\\Program Files\\MongoDB\\Server\\3.2\\bin;C:\\Program Files\\Nmap;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Git\\usr\\bin;C:\\Users\\liukang\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts\\;C:\\Users\\liukang\\AppData\\Local\\Programs\\Python\\Python36-32\\;C:\\Program Files\\MongoDB\\Server\\3.2\\bin;C:\\Program Files\\Nmap;C:\\Program Files\\Git\\usr\\bin', 'PYTHONUNBUFFERED': '1', 'WINDOWS_TRACING_FLAGS': '3', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'TESSDATA_PREFIX': 'C:\\Program Files\\Tesseract-OCR\\', 'TEMP': 'C:\\Users\\liukang\\AppData\\Local\\Temp', 'PROCESSOR_ARCHITECTURE': 'x86', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LOCALAPPDATA': 'C:\\Users\\liukang\\AppData\\Local', 'HOMEPATH': '\\Users\\liukang', 'USERNAME': 'liukang', 'LOGONSERVER': '\\\\LIUKANG-PC', 'SESSIONNAME': 'Console', 'PROGRAMDATA': 'C:\\ProgramData', 'PYTHONPATH': 'F:\\pythonuse\\project\\bh', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'MOZ_PLUGIN_PATH': 'C:\\Program Files\\Foxit Software\\Foxit Reader\\plugins\\', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\Windows', 'WINDOWS_TRACING_LOGFILE': 'C:\\BVTBin\\Tests\\installpackage\\csilogfile.log', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'PYCHARM_HOSTED': '1', 'NUMBER_OF_PROCESSORS': '4', 'APPDATA': 'C:\\Users\\liukang\\AppData\\Roaming', 'PROCESSOR_LEVEL': '21', '#ENVTSLOGSSS2760': '64776800', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\liukang'}